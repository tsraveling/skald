{"functions":[{"name":"introParagraph","components":["Note: Any variables will be assumed to be present in the 'state' object passed in the optional argument in Skald. If a variable is not found, the value 'ERR' will be used instead. ","A line of plaintext will be returned as part of the result, verbatim, with no mutation. A newline is treated like a space unless it is the final one. ","An optional can be defined using brackets. One of the following will be chosen: ",{"type":"draw","options":["option a","option B"]}," ","You can also include conditionals: ",{"type":"draw","options":[{"value":"option a","optional":{"conditions":[{"prop":"pickerSwitch","comparison":true,"negative":false}]}},"option b"]},". Note: If there's no option available, ERR will be returned. ","A conditional will only be included if the passed state requirement is met: ",{"type":"optional","optional":{"conditions":[{"prop":"shouldShowInclude","comparison":true,"negative":false}]},"value":" Inserted text "}," ","An insert is inserted as-is: ",{"type":"insert","insert":"insert"}," ","If you want **Markdown** to work, you'll have to process the text through a third-party library. ","A pick statement is used to choose randomly from a longer list of options. A conditional can be placed at the beginning of the line to allow for greater filtration. ","Note: Skald will trim whitespace off the front and end of a line. Indentation is not required, but may help script readability. ",{"type":"pick","items":[{"optional":null,"components":["First option "]},{"optional":null,"components":["Second option "]},{"optional":{"conditions":[{"prop":"pickerSwitch","comparison":true,"negative":false}]},"components":["Positive optional "]},{"optional":{"conditions":[{"prop":"pickerSwitch","comparison":true,"negative":true}]},"components":["Negative optional "]},{"optional":{"conditions":[{"prop":"pickerSwitch","comparison":true,"negative":false},{"prop":"secondSwitch","comparison":true,"negative":false}]},"components":["multi-argument optional "]},{"optional":{"conditions":[{"prop":"pickerSwitch","comparison":true,"negative":false},{"prop":"secondSwitch","comparison":true,"negative":true}]},"components":["multi-argument including negative optional "]},{"optional":{"conditions":[{"prop":"specificValue","comparison":"aValue","negative":false}]},"components":["equality check -- note lack of quotes etc "]},{"optional":{"conditions":[{"prop":"specificValue","comparison":"aValue","negative":true}]},"components":["inequality check "]}]},"A pick statement ends when there are no more '- ' lines. ","Note: Newlines like the one above are ignored. To pass an actual newline, used the standard escape: \\n ","A switch statement takes an argument from the passed state object and provides separate answers based on the value. default: defines a default value in the absence of the value options given. ","Failure to pass a default option will result in an ERR value if the condition is not met. ",{"type":"switch","items":[{"value":"1","result":["The answer was one "]},{"value":"2","result":["The answer was two "]},{"value":"3","result":["The answer was three "]},{"value":"default","result":["There was some other answer. "]}],"prop":"switchValue"},"As with the pick statement, a switch statement ends when a line does not begin with the `someKey: result` pattern. ","Finally, to try this out, set up a Skald object on this file and run `skaldExample.perform('introParagraph', state)` with the values found in the example App.js file. "]},{"name":"secondFunction","components":["Some content. "]}],"exampleValue":"Example"}